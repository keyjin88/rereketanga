/*
   Generated by EX4-TO-MQ4 decompiler V4.0.225.1g []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Old Tree Publishing"
#property link      "http://www.forexmastermethod.com/"

/*#import "wininet.dll"
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetOpenUrlA(int a0, string a1, string a2, int a3, int a4, int a5);
   int InternetReadFile(int a0, string a1, int a2, int& a3[]);
   int InternetCloseHandle(int a0);
#import
*/
extern string note = " ======= Authentication SETTINGS ======";
extern string username = "";
extern string password = "";
extern string StochName = "Stoch(8,3,5)";
extern int StochKPeriod = 8;
extern int StochDPeriod = 3;
extern int StochSlowing = 5;
extern string MACDName = "MACD(12,26,9)";
extern string sTextPar = " ==== DIVERGENCE PAINTING SETTINGS ====";
extern bool StochBearish = TRUE;
extern bool StochBullish = TRUE;
extern bool MACDBearish = TRUE;
extern bool MACDBullish = TRUE;
extern bool ShowOnlyDouble = FALSE;
extern bool OnDoubleAlert = FALSE;
extern bool HiddenBearishAlert = FALSE;
extern bool RegularBearishAlert = FALSE;
extern bool HiddenBullishAlert = FALSE;
extern bool RegularBullishAlert = FALSE;
extern bool CustomStyles = FALSE;
extern color RegularBearish = Aqua;
extern int RegularBearishStyle = 0;
extern color HiddenBearish = Blue;
extern int HiddenBearishStyle = 1;
extern color RegularBullish = Red;
extern int RegularBullishStyle = 0;
extern color HiddenBullish = Orange;
extern int HiddenBullishStyle = 1;
extern color DoubleText = Yellow;
extern double MACDPickDif = 2.0;
extern string sTextv3 = " ====== V3 Settings ====== ";
extern int NrLoad = 10;
extern bool UseLineTrader = FALSE;
extern string sTextlt = " ====== LineTrader Settings ====== ";
extern string BuyAboveLineName = "BA";
extern color BuyAboveLineColor = Blue;
extern string BuyBelowLineName = "BB";
extern color BuyBelowLineColor = Blue;
extern string SellAboveLineName = "SA";
extern color SellAboveLineColor = Red;
extern string SellBelowLineName = "SB";
extern color SellBelowLineColor = Red;
extern color OnCompleteColor = Yellow;
extern string OnCompleteText = "DONE";
extern int PipsRangeFromLine = 3;
extern bool CheckAfterClose = TRUE;
extern bool OpenOrders = TRUE;
extern double LotSize = 0.1;
extern int StopLoss = 50;
extern int TakeProfit = 100;
extern int Slippage = 3;
extern int MagicNumber = 3596;
extern bool NotifyByAlert = TRUE;
int gi_348 = 5;
int gi_352 = 23;
int gi_356 = 75;
bool gi_360 = FALSE;
bool gi_364 = FALSE;
int gi_368 = 7;
int g_count_372 = 7;
int gi_376 = 7;
int gi_380 = 7;
int gi_384 = 7;
int gi_388 = 7;
int g_count_392 = 7;
int g_count_396 = 7;
int g_count_400 = 7;
int g_count_404 = 7;
int gia_408[];
int gia_412[];
int gia_416[];
int gia_420[];
int gia_424[];
int gia_428[];
int gia_432[][4];
int gia_436[][4];
double g_point_440;
double gd_448;
string gs_456 = "";
string gs_464 = "";
int g_slippage_472;
int g_str2int_476 = 0;
bool gi_480 = FALSE;
bool gi_484 = TRUE;
int gia_488[64] = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47};
int gi_492 = 1;
string gs_dummy_496;
int gi_504 = 0;
int gi_508 = 0;
int g_count_512 = 0;
string gs_516;
int gia_524[1];
string gs_532 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
int g_index_540 = 0;
int g_index_544 = 0;
int g_time_548 = 0;

int init() {
   int l_objs_total_4;
   string l_name_8;
   bool li_16;
   delete_objects();
   if (NrLoad > 80) NrLoad = 80;
   if (NrLoad < 7) NrLoad = 7;
   ArrayResize(gia_408, NrLoad);
   ArrayResize(gia_412, NrLoad);
   ArrayResize(gia_416, NrLoad);
   ArrayResize(gia_420, NrLoad);
   ArrayResize(gia_424, NrLoad);
   ArrayResize(gia_428, NrLoad);
   ArrayResize(gia_432, NrLoad);
   ArrayResize(gia_436, NrLoad);
   g_str2int_476 = 0;
   gi_480 = FALSE;
   gi_484 = TRUE;
   if (Point == 0.00001) g_point_440 = 0.0001;
   else {
      if (Point == 0.001) g_point_440 = 0.01;
      else g_point_440 = Point;
   }
   g_slippage_472 = Slippage * g_point_440 / Point;
   gd_448 = PipsRangeFromLine * g_point_440;
   if (gi_484 == TRUE && g_str2int_476 == 0) {
      gs_456 = "\nTrade Locator v3\n authenticating...";
      Comment(gs_456);
     
         gi_480 = TRUE;
         gs_456 = "\nTrade Locator v3\n working...";
      
         Comment(gs_456);
    
      gi_484 = FALSE;
   }
   if (gi_480 == TRUE) {
      update_stock_picks(1, "stck_max", Blue);
      update_stock_picks(2, "stck_min", Red);
      update_macd_picks(1, "macd_max", Blue);
      update_macd_picks(2, "macd_min", Red);
      addBearish(0, 0, 0, 0, 1);
      addBullish(0, 0, 0, 0, 1);
      for (int li_0 = 0; li_0 < NrLoad - 3; li_0++) {
         if (StochBearish) {
            if (check_STDiv_bear(li_0, li_0 + 1) == 0) {
               if (check_STDiv_bear(li_0, li_0 + 2) == 0)
                  if (check_STDiv_bear(li_0, li_0 + 3) == 0) check_STDiv_bear(li_0, li_0 + 4);
            }
         }
         if (StochBullish) {
            if (check_STDiv_bull(li_0, li_0 + 1) == 0)
               if (check_STDiv_bull(li_0, li_0 + 2) == 0) check_STDiv_bull(li_0, li_0 + 3);
         }
         if (MACDBearish) {
            if (check_MacdDiv_bear(li_0, li_0 + 1, 1, gia_416) == 0)
               if (check_MacdDiv_bear(li_0, li_0 + 2, 1, gia_416) == 0) check_MacdDiv_bear(li_0, li_0 + 3, 1, gia_416);
         }
         if (MACDBullish) {
            if (check_MacdDiv_bull(li_0, li_0 + 1, 1, gia_420) == 0)
               if (check_MacdDiv_bull(li_0, li_0 + 2, 1, gia_420) == 0) check_MacdDiv_bull(li_0, li_0 + 3, 1, gia_420);
         }
      }
      checkHiddenBearish();
      checkBullish();
      if (ShowOnlyDouble) {
         l_name_8 = "";
         li_16 = TRUE;
         while (li_16) {
            li_16 = FALSE;
            l_objs_total_4 = ObjectsTotal();
            for (li_0 = 0; li_0 < l_objs_total_4; li_0++) {
               l_name_8 = ObjectName(li_0);
               if (StringFind(l_name_8, "RHMM") != -1 && StringFind(l_name_8, "RHMMDbl") == -1 && StringFind(l_name_8, "Macd") == -1 && StringFind(l_name_8, "Sto") == -1) {
                  ObjectDelete(l_name_8);
                  li_16 = TRUE;
               }
            }
         }
      }
   }
   return (0);
}

void update_stock_picks(int ai_0, string as_4, color a_color_12) {
   string l_name_16;
   int l_window_24 = 0;
   l_window_24 = WindowFind(StochName);
   int li_28 = 1;
   for (int l_index_32 = 0; l_index_32 < NrLoad; l_index_32++) {
      while (stock_peak(li_28) != ai_0) li_28++;
      if (ai_0 == 1) gia_408[l_index_32] = li_28;
      if (ai_0 == 2) gia_412[l_index_32] = li_28;
      if (gi_360) {
         l_name_16 = "RHMM" + as_4 + li_28;
         ObjectDelete(l_name_16);
         ObjectCreate(l_name_16, OBJ_ARROW, l_window_24, Time[li_28], dStock(li_28));
         ObjectSet(l_name_16, OBJPROP_COLOR, a_color_12);
         ObjectSet(l_name_16, OBJPROP_ARROWCODE, 119);
      }
      li_28 += 2;
   }
}

void update_macd_picks(int ai_0, string as_4, color a_color_12) {
   string l_name_16;
   int l_window_24 = WindowFind(MACDName);
   int li_28 = 1;
   bool li_36 = TRUE;
   int li_40 = ai_0;
   if (ai_0 > 2) {
      li_36 = FALSE;
      li_40 = ai_0 - 2;
   }
   for (int l_index_32 = 0; l_index_32 < NrLoad; l_index_32++) {
      while (macd_peak(li_28, li_36) != li_40) li_28++;
      if (ai_0 == 1) gia_416[l_index_32] = li_28;
      if (ai_0 == 2) gia_420[l_index_32] = li_28;
      if (ai_0 == 3) gia_424[l_index_32] = li_28;
      if (ai_0 == 4) gia_428[l_index_32] = li_28;
      if (gi_360) {
         l_name_16 = "RHMM" + as_4 + li_28;
         ObjectDelete(l_name_16);
         ObjectCreate(l_name_16, OBJ_ARROW, l_window_24, Time[li_28], dMACD(li_28, li_36));
         ObjectSet(l_name_16, OBJPROP_COLOR, a_color_12);
         ObjectSet(l_name_16, OBJPROP_ARROWCODE, 119);
      }
      li_28 += 2;
   }
}

double dMACD(int ai_0, int ai_4) {
   if (ai_4 == 0) return (iCustom(Symbol(), 0, "MACD 2Line", 12, 26, 9, 0, ai_0));
   if (ai_4 == 1) {
      if (iCustom(Symbol(), 0, "MACD 2Line", 12, 26, 9, 2, ai_0) != 0.0) return (iCustom(Symbol(), 0, "MACD 2Line", 12, 26, 9, 2, ai_0));
      return (iCustom(Symbol(), 0, "MACD 2Line", 12, 26, 9, 3, ai_0));
   }
   return (0.0);
}

int macd_peak(int ai_0, int ai_4) {
   double ld_8 = dMACD(ai_0 - 1, ai_4);
   double ld_16 = dMACD(ai_0, ai_4);
   double ld_24 = dMACD(ai_0 + 1, ai_4);
   double ld_32 = dMACD(ai_0 + 2, ai_4);
   if (ld_16 > ld_8 && ld_16 > ld_24 && ld_16 > ld_32) return (1);
   if (ld_16 < ld_8 && ld_16 < ld_24 && ld_16 < ld_32) return (2);
   return (0);
}

int check_MacdDiv_bull(int ai_0, int ai_4, int ai_8, int aia_12[]) {
   int li_16 = 0;
   int li_20 = 0;
   if (aia_12[ai_4] - aia_12[ai_0] < 5) return (0);
   if (MathAbs(dMACD(aia_12[ai_0], ai_8) - dMACD(aia_12[ai_4], ai_8)) < MACDPickDif * g_point_440) return (0);
   if (ai_4 - ai_0 > 1) {
      for (int li_24 = ai_0 + 1; li_24 < ai_4; li_24++) {
         if (dMACD(aia_12[ai_0], ai_8) > dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) < dMACD(aia_12[ai_4], ai_8)) return (0);
         if (dMACD(aia_12[ai_0], ai_8) > dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) < dMACD(aia_12[ai_0], ai_8)) return (0);
         if (dMACD(aia_12[ai_0], ai_8) < dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) < dMACD(aia_12[ai_0], ai_8)) return (0);
         if (dMACD(aia_12[ai_0], ai_8) < dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) < dMACD(aia_12[ai_4], ai_8)) return (0);
      }
   }
   int li_28 = WindowFind(MACDName);
   if (dMACD(aia_12[ai_0], ai_8) < dMACD(aia_12[ai_4], ai_8) && Low[aia_12[ai_0]] > Low[aia_12[ai_4]]) {
      li_16 = get_min_low(aia_12[ai_0]);
      li_20 = get_min_low(aia_12[ai_4]);
      if (Low[li_16] < Low[li_20]) return (0);
      if (li_20 - li_16 < 5) return (0);
      draw_line_ind(aia_12[ai_0], dMACD(aia_12[ai_0], ai_8), aia_12[ai_4], dMACD(aia_12[ai_4], ai_8), "RHMM" + ai_8 + "MacdSupport" + aia_12[ai_0], HiddenBullish, 2, li_28, HiddenBullishStyle);
      draw_line(li_16, Low[li_16], li_20, Low[li_20], "RHMM" + ai_8 + "MSupport_chart" + li_16, HiddenBullish, 2, HiddenBullishStyle);
      addBullish(li_16, li_20, ai_8 + 1, 1);
      return (3);
   }
   if (dMACD(aia_12[ai_0], ai_8) > dMACD(aia_12[ai_4], ai_8) && Low[aia_12[ai_0]] < Low[aia_12[ai_4]]) {
      li_16 = get_min_low(aia_12[ai_0]);
      li_20 = get_min_low(aia_12[ai_4]);
      if (Low[li_16] > Low[li_20]) return (0);
      if (li_20 - li_16 < 5) return (0);
      draw_line_ind(aia_12[ai_0], dMACD(aia_12[ai_0], ai_8), aia_12[ai_4], dMACD(aia_12[ai_4], ai_8), "RHMM" + ai_8 + "Macd2Support" + aia_12[ai_0], RegularBullish, 3, li_28, RegularBullishStyle);
      draw_line(li_16, Low[li_16], li_20, Low[li_20], "RHMM" + ai_8 + "MSupport_chart" + li_16, RegularBullish, 3, RegularBullishStyle);
      addBullish(li_16, li_20, ai_8 + 1, 3);
      return (4);
   }
   return (0);
}

int check_MacdDiv_bear(int ai_0, int ai_4, int ai_8, int aia_12[]) {
   int li_16 = 0;
   int li_20 = 0;
   if (aia_12[ai_4] - aia_12[ai_0] < 7) return (0);
   if (MathAbs(dMACD(aia_12[ai_0], ai_8) - dMACD(aia_12[ai_4], ai_8)) < MACDPickDif * g_point_440) return (0);
   if (ai_4 - ai_0 > 1) {
      for (int li_24 = ai_0 + 1; li_24 < ai_4; li_24++) {
         if (dMACD(aia_12[ai_0], ai_8) > dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) > dMACD(aia_12[ai_4], ai_8)) return (0);
         if (dMACD(aia_12[ai_0], ai_8) < dMACD(aia_12[ai_4], ai_8) && dMACD(aia_12[li_24], ai_8) > dMACD(aia_12[ai_0], ai_8)) return (0);
      }
   }
   int li_28 = WindowFind(MACDName);
   if (dMACD(aia_12[ai_0], ai_8) < dMACD(aia_12[ai_4], ai_8) && High[aia_12[ai_0]] > High[aia_12[ai_4]]) {
      li_16 = get_max_high(aia_12[ai_0]);
      li_20 = get_max_high(aia_12[ai_4]);
      if (High[li_16] < High[li_20]) return (0);
      draw_line_ind(aia_12[ai_0], dMACD(aia_12[ai_0], ai_8), aia_12[ai_4], dMACD(aia_12[ai_4], ai_8), "RHMMMacd" + ai_8 + "Resistance" + aia_12[ai_0], RegularBearish, 2, li_28, RegularBearishStyle);
      draw_line(li_16, High[li_16], li_20, High[li_20], "RHMMMResistance" + ai_8 + "_chart" + li_16, RegularBearish, 2, RegularBearishStyle);
      addBearish(li_16, li_20, ai_8 + 1, 1);
      return (1);
   }
   if (dMACD(aia_12[ai_0], ai_8) > dMACD(aia_12[ai_4], ai_8) && High[aia_12[ai_0]] < High[aia_12[ai_4]]) {
      li_16 = get_max_high(aia_12[ai_0]);
      li_20 = get_max_high(aia_12[ai_4]);
      if (High[li_16] > High[li_20]) return (0);
      draw_line_ind(aia_12[ai_0], dMACD(aia_12[ai_0], ai_8), aia_12[ai_4], dMACD(aia_12[ai_4], ai_8), "RHMM" + ai_8 + "Macd2Resistance" + aia_12[ai_0], HiddenBearish, 3, li_28, HiddenBearishStyle);
      draw_line(li_16, High[li_16], li_20, High[li_20], "RHMMMResistance" + ai_8 + "_chart" + li_16, HiddenBearish, 3, HiddenBearishStyle);
      addBearish(li_16, li_20, ai_8 + 1, 3);
      return (2);
   }
   return (0);
}

int check_STDiv_bear(int ai_0, int ai_4) {
   int li_8 = 0;
   int li_12 = 0;
   if (gia_408[ai_4] - gia_408[ai_0] < 5) return (0);
   if (MathAbs(dStock(gia_408[ai_0]) - dStock(gia_408[ai_4])) < gi_348) return (0);
   if (dStock(gia_408[ai_0]) < gi_352 || dStock(gia_408[ai_4]) < gi_352) return (0);
   if (ai_4 - ai_0 > 1) {
      for (int li_16 = ai_0 + 1; li_16 < ai_4; li_16++) {
         if (dStock(gia_408[ai_0]) > dStock(gia_408[ai_4]) && dStock(gia_408[li_16]) > dStock(gia_408[ai_4])) return (0);
         if (dStock(gia_408[ai_0]) < dStock(gia_408[ai_4]) && dStock(gia_408[li_16]) > dStock(gia_408[ai_0])) return (0);
      }
   }
   int li_20 = WindowFind(StochName);
   if (dStock(gia_408[ai_0]) < dStock(gia_408[ai_4]) && High[gia_408[ai_0]] > High[gia_408[ai_4]]) {
      li_8 = get_max_high(gia_408[ai_0]);
      li_12 = get_max_high(gia_408[ai_4]);
      if (High[li_8] < High[li_12]) return (0);
      draw_line_ind(gia_408[ai_0], dStock(gia_408[ai_0]), gia_408[ai_4], dStock(gia_408[ai_4]), "RHMMStoResistance" + gia_408[ai_0], RegularBearish, 2, li_20, RegularBearishStyle);
      draw_line(li_8, High[li_8], li_12, High[li_12], "RHMMResistance_chart" + li_8, RegularBearish, 2, RegularBearishStyle);
      addBearish(li_8, li_12, 3, 1);
      return (1);
   }
   if (dStock(gia_408[ai_0]) > dStock(gia_408[ai_4]) && High[gia_408[ai_0]] < High[gia_408[ai_4]]) {
      li_8 = get_max_high(gia_408[ai_0]);
      li_12 = get_max_high(gia_408[ai_4]);
      if (High[li_8] > High[li_12]) return (0);
      draw_line_ind(gia_408[ai_0], dStock(gia_408[ai_0]), gia_408[ai_4], dStock(gia_408[ai_4]), "RHMMStoResistance" + gia_408[ai_0], HiddenBearish, 3, li_20, HiddenBearishStyle);
      draw_line(li_8, High[li_8], li_12, High[li_12], "RHMMResistance_chart" + li_8, HiddenBearish, 3, HiddenBearishStyle);
      addBearish(li_8, li_12, 3, 3);
      return (2);
   }
   return (0);
}

int get_max_high(int ai_0) {
   double l_high_4 = High[ai_0 + 2];
   int li_ret_12 = ai_0 + 2;
   for (int li_16 = ai_0 - 2; li_16 < ai_0 + 2; li_16++) {
      if (li_16 > 0 && High[li_16] > l_high_4) {
         l_high_4 = High[li_16];
         li_ret_12 = li_16;
      }
   }
   return (li_ret_12);
}

int check_STDiv_bull(int ai_0, int ai_4) {
   int li_8 = 0;
   int li_12 = 0;
   if (gia_412[ai_4] - gia_412[ai_0] < 5) return (0);
   if (MathAbs(dStock(gia_412[ai_0]) - dStock(gia_412[ai_4])) < gi_348) return (0);
   if (dStock(gia_412[ai_0]) > gi_356 || dStock(gia_412[ai_4]) > gi_356) return (0);
   if (ai_4 - ai_0 > 1) {
      for (int li_16 = ai_0 + 1; li_16 < ai_4; li_16++) {
         if (dStock(gia_412[ai_0]) > dStock(gia_412[ai_4]) && dStock(gia_412[li_16]) < dStock(gia_412[ai_4])) return (0);
         if (dStock(gia_412[ai_0]) > dStock(gia_412[ai_4]) && dStock(gia_412[li_16]) < dStock(gia_412[ai_0])) return (0);
         if (dStock(gia_412[ai_0]) < dStock(gia_412[ai_4]) && dStock(gia_412[li_16]) < dStock(gia_412[ai_0])) return (0);
         if (dStock(gia_412[ai_0]) < dStock(gia_412[ai_4]) && dStock(gia_412[li_16]) < dStock(gia_412[ai_4])) return (0);
      }
   }
   int li_20 = WindowFind(StochName);
   if (dStock(gia_412[ai_0]) < dStock(gia_412[ai_4]) && Low[gia_412[ai_0]] > Low[gia_412[ai_4]]) {
      li_8 = get_min_low(gia_412[ai_0]);
      li_12 = get_min_low(gia_412[ai_4]);
      if (Low[li_8] < Low[li_12]) return (0);
      if (li_12 - li_8 < 5) return (0);
      draw_line_ind(gia_412[ai_0], dStock(gia_412[ai_0]), gia_412[ai_4], dStock(gia_412[ai_4]), "RHMMStoSupport" + gia_412[ai_0], HiddenBullish, 2, li_20, HiddenBullishStyle);
      draw_line(li_8, Low[li_8], li_12, Low[li_12], "RHMMSupport_chart" + li_8, HiddenBullish, 2, HiddenBullishStyle);
      addBullish(li_8, li_12, 3, 1);
      return (3);
   }
   if (dStock(gia_412[ai_0]) > dStock(gia_412[ai_4]) && Low[gia_412[ai_0]] < Low[gia_412[ai_4]]) {
      li_8 = get_min_low(gia_412[ai_0]);
      li_12 = get_min_low(gia_412[ai_4]);
      if (Low[li_8] > Low[li_12]) return (0);
      if (li_12 - li_8 < 5) return (0);
      draw_line_ind(gia_412[ai_0], dStock(gia_412[ai_0]), gia_412[ai_4], dStock(gia_412[ai_4]), "RHMMStoSupport" + gia_412[ai_0], RegularBullish, 3, li_20, RegularBullishStyle);
      draw_line(li_8, Low[li_8], li_12, Low[li_12], "RHMMSupport_chart" + li_8, RegularBullish, 3, RegularBullishStyle);
      addBullish(li_8, li_12, 3, 3);
      return (4);
   }
   return (0);
}

int get_min_low(int ai_0) {
   double l_low_4 = Low[ai_0 + 2];
   int li_ret_12 = ai_0 + 2;
   for (int li_16 = ai_0 - 2; li_16 < ai_0 + 2; li_16++) {
      if (li_16 > 0 && Low[li_16] < l_low_4) {
         l_low_4 = Low[li_16];
         li_ret_12 = li_16;
      }
   }
   return (li_ret_12);
}

double dStock(int a_shift_0) {
   return (iStochastic(Symbol(), 0, StochKPeriod, StochDPeriod, StochSlowing, MODE_SMA, 0, MODE_MAIN, a_shift_0));
}

int deinit() {
   gs_456 = "";
   Comment(gs_456);
   delete_objects();
   return (0);
}

void delete_objects() {
   int l_objs_total_0;
   string l_name_4 = "";
   bool li_12 = TRUE;
   while (li_12) {
      li_12 = FALSE;
      l_objs_total_0 = ObjectsTotal();
      for (int li_16 = 0; li_16 < l_objs_total_0; li_16++) {
         l_name_4 = ObjectName(li_16);
         if (StringFind(l_name_4, "RHMM") != -1) {
            ObjectDelete(l_name_4);
            li_12 = TRUE;
         }
      }
   }
}

int addBearish(int ai_0, int ai_4, int ai_8, int ai_12, bool ai_16 = FALSE) {
   string ls_20;
   if (ai_16) {
      ArrayInitialize(gia_432, 0);
      g_index_540 = 0;
      return (0);
   }
   gia_432[g_index_540][0] = ai_0;
   gia_432[g_index_540][1] = ai_4;
   gia_432[g_index_540][2] = ai_8;
   gia_432[g_index_540][3] = ai_12;
   g_index_540++;
   if (ai_0 < 5) {
      ls_20 = "Stochastic";
      if (ai_8 == 2) ls_20 = "MACD";
      if (gi_376 != ai_0 && RegularBearishAlert && ai_12 == 1) {
         if (g_count_392 != 1) Alert("Regular Bearish on " + Symbol() + " " + Period() + " min chart from " + ls_20 + " bar " + ai_0);
         gi_376 = ai_0;
         g_count_392 = 0;
      }
      if (gi_380 != ai_0 && HiddenBearishAlert && ai_12 == 3) {
         if (g_count_396 != 1) Alert("Hidden Bearish on " + Symbol() + " " + Period() + " min chart from " + ls_20 + " bar " + ai_0);
         gi_380 = ai_0;
         g_count_396 = 0;
      }
   }
   return (0);
}

int checkHiddenBearish() {
   int li_0;
   int li_4;
   bool l_color_8 = Black;
   bool li_12 = FALSE;
   int li_16 = 0;
   for (int l_index_20 = 0; l_index_20 < NrLoad - 2; l_index_20++) {
      if (gia_432[l_index_20][2] == 0) break;
      li_16 = gia_432[l_index_20][1] - gia_432[l_index_20][0];
      for (int li_24 = l_index_20 + 1; li_24 < NrLoad - 2; li_24++) {
         if (MathAbs(gia_432[li_24][1] - gia_432[l_index_20][1]) < li_16 / 2 && MathAbs(gia_432[li_24][0] - gia_432[l_index_20][0]) < li_16 / 2 && gia_432[li_24][3] == gia_432[l_index_20][3]) {
            li_0 = MathMin(gia_432[li_24][0], gia_432[l_index_20][0]);
            li_4 = MathMax(gia_432[li_24][1], gia_432[l_index_20][1]);
            if (gia_432[li_24][2] == 3) ObjectDelete("RHMMResistance_chart" + gia_432[li_24][0]);
            else ObjectDelete("RHMMMResistance1_chart" + gia_432[li_24][0]);
            if (gia_432[l_index_20][2] == 3) ObjectDelete("RHMMResistance_chart" + gia_432[l_index_20][0]);
            else ObjectDelete("RHMMMResistance1_chart" + gia_432[l_index_20][0]);
            if (gia_432[li_24][3] == 3) {
               l_color_8 = HiddenBearish;
               li_12 = HiddenBearishStyle;
            } else {
               l_color_8 = RegularBearish;
               li_12 = RegularBearishStyle;
            }
            draw_line(li_0, High[li_0], li_4, High[li_4], "RHMMDblResisstance_chart" + li_0, l_color_8, 3, li_12);
            if (li_0 < 5 && gi_368 != li_0 && OnDoubleAlert) {
               if (g_count_372 != 1) Alert("Double BEAR on " + Symbol() + " " + Period() + " minute chart");
               gi_368 = li_0;
               g_count_372 = 0;
            }
            ObjectCreate("RHMMxdt" + l_index_20, OBJ_TEXT, 0, Time[(gia_432[li_24][1] + gia_432[li_24][0]) / 2], (High[gia_432[li_24][1]] + High[gia_432[li_24][0]]) / 2.0);
            ObjectSetText("RHMMxdt" + l_index_20, "DOUBLE BEAR", 9, "Lucida Console", DoubleText);
            fixBearish(li_24);
            li_24--;
         }
      }
   }
   return (0);
}

int addBullish(int ai_0, int ai_4, int ai_8, int ai_12, bool ai_16 = FALSE) {
   string ls_20;
   if (ai_16) {
      ArrayInitialize(gia_436, 0);
      g_index_544 = 0;
      return (0);
   }
   gia_436[g_index_544][0] = ai_0;
   gia_436[g_index_544][1] = ai_4;
   gia_436[g_index_544][2] = ai_8;
   gia_436[g_index_544][3] = ai_12;
   g_index_544++;
   if (ai_0 < 5) {
      ls_20 = "Stochastic";
      if (ai_8 == 2) ls_20 = "MACD";
      if (gi_384 != ai_0 && RegularBullishAlert && ai_12 == 1) {
         if (g_count_400 != 1) Alert("Regular Bullish on " + Symbol() + " " + Period() + " min chart from " + ls_20 + " bar " + ai_0);
         gi_384 = ai_0;
         g_count_400 = 0;
      }
      if (gi_388 != ai_0 && HiddenBullishAlert && ai_12 == 3) {
         if (g_count_404 != 1) Alert("Hidden Bullish on " + Symbol() + " " + Period() + " min chart from " + ls_20 + " bar " + ai_0);
         gi_388 = ai_0;
         g_count_404 = 0;
      }
   }
   return (0);
}

int fixBearish(int ai_0) {
   while (gia_432[ai_0][3] != 0) {
      gia_432[ai_0][0] = gia_432[ai_0 + 1][0];
      gia_432[ai_0][1] = gia_432[ai_0 + 1][1];
      gia_432[ai_0][2] = gia_432[ai_0 + 1][2];
      gia_432[ai_0][3] = gia_432[ai_0 + 1][3];
      ai_0++;
      if (ai_0 > NrLoad) break;
   }
   return (0);
}

int fixBullish(int ai_0) {
   while (gia_436[ai_0][3] != 0) {
      gia_436[ai_0][0] = gia_436[ai_0 + 1][0];
      gia_436[ai_0][1] = gia_436[ai_0 + 1][1];
      gia_436[ai_0][2] = gia_436[ai_0 + 1][2];
      gia_436[ai_0][3] = gia_436[ai_0 + 1][3];
      ai_0++;
      if (ai_0 > NrLoad) break;
   }
   return (0);
}

int checkBullish() {
   int li_12;
   int li_16;
   int li_0 = 0;
   bool l_color_20 = Black;
   bool li_24 = FALSE;
   for (int l_index_4 = 0; l_index_4 < NrLoad - 2; l_index_4++) {
      if (gia_436[l_index_4][2] == 0) break;
      li_0 = gia_436[l_index_4][1] - gia_436[l_index_4][0];
      for (int li_8 = l_index_4 + 1; li_8 < NrLoad - 2; li_8++) {
         if (MathAbs(gia_436[li_8][1] - gia_436[l_index_4][1]) < li_0 / 2 && MathAbs(gia_436[li_8][0] - gia_436[l_index_4][0]) < li_0 / 2 && gia_436[li_8][3] == gia_436[l_index_4][3]) {
            li_12 = MathMin(gia_436[li_8][0], gia_436[l_index_4][0]);
            li_16 = MathMax(gia_436[li_8][1], gia_436[l_index_4][1]);
            if (gia_436[li_8][2] == 3) ObjectDelete("RHMMSupport_chart" + gia_436[li_8][0]);
            else ObjectDelete("RHMM1MSupport_chart" + gia_436[li_8][0]);
            if (gia_436[l_index_4][2] == 3) ObjectDelete("RHMMSupport_chart" + gia_436[l_index_4][0]);
            else ObjectDelete("RHMM1MSupport_chart" + gia_436[l_index_4][0]);
            if (gia_436[li_8][3] == 3) {
               l_color_20 = RegularBullish;
               li_24 = RegularBullishStyle;
            } else {
               l_color_20 = HiddenBullish;
               li_24 = HiddenBullishStyle;
            }
            draw_line(li_12, Low[li_12], li_16, Low[li_16], "RHMMDblSupport_chart" + li_12, l_color_20, 3, li_24);
            if (li_12 < 5 && gi_368 != li_12 && OnDoubleAlert) {
               if (g_count_372 != 1) Alert("Double BULL on " + Symbol() + " " + Period() + " minute chart");
               gi_368 = li_12;
               g_count_372 = 0;
            }
            ObjectCreate("RHMMxdtf" + l_index_4, OBJ_TEXT, 0, Time[(li_12 + li_16) / 2], (Low[li_12] + Low[li_16]) / 2.0);
            ObjectSetText("RHMMxdtf" + l_index_4, "DOUBLE BULL", 9, "Lucida Console", DoubleText);
            fixBullish(li_8);
            li_8--;
         }
      }
   }
   return (0);
}

int start() {
   int l_objs_total_4;
   string l_name_8;
   bool li_16;
   if (gi_480 == TRUE) {
      if (NewBar()) {
         delete_objects();
         gi_368++;
         g_count_372++;
         gi_376++;
         gi_380++;
         g_count_392++;
         g_count_396++;
         gi_384++;
         gi_388++;
         g_count_400++;
         g_count_404++;
         update_stock_picks(1, "stck_max", Blue);
         update_stock_picks(2, "stck_min", Red);
         update_macd_picks(1, "macd_max", Blue);
         update_macd_picks(2, "macd_min", Red);
         addBearish(0, 0, 0, 0, 1);
         addBullish(0, 0, 0, 0, 1);
         for (int li_0 = 0; li_0 < NrLoad - 3; li_0++) {
            if (StochBearish) {
               if (check_STDiv_bear(li_0, li_0 + 1) == 0) {
                  if (check_STDiv_bear(li_0, li_0 + 2) == 0)
                     if (check_STDiv_bear(li_0, li_0 + 3) == 0) check_STDiv_bear(li_0, li_0 + 4);
               }
            }
            if (StochBullish) {
               if (check_STDiv_bull(li_0, li_0 + 1) == 0)
                  if (check_STDiv_bull(li_0, li_0 + 2) == 0) check_STDiv_bull(li_0, li_0 + 3);
            }
            if (MACDBearish) {
               if (check_MacdDiv_bear(li_0, li_0 + 1, 1, gia_416) == 0)
                  if (check_MacdDiv_bear(li_0, li_0 + 2, 1, gia_416) == 0) check_MacdDiv_bear(li_0, li_0 + 3, 1, gia_416);
            }
            if (MACDBullish) {
               if (check_MacdDiv_bull(li_0, li_0 + 1, 1, gia_420) == 0)
                  if (check_MacdDiv_bull(li_0, li_0 + 2, 1, gia_420) == 0) check_MacdDiv_bull(li_0, li_0 + 3, 1, gia_420);
            }
         }
         checkHiddenBearish();
         checkBullish();
         if (ShowOnlyDouble) {
            l_name_8 = "";
            li_16 = TRUE;
            while (li_16) {
               li_16 = FALSE;
               l_objs_total_4 = ObjectsTotal();
               for (li_0 = 0; li_0 < l_objs_total_4; li_0++) {
                  l_name_8 = ObjectName(li_0);
                  if (StringFind(l_name_8, "RHMM") != -1 && StringFind(l_name_8, "RHMMDbl") == -1 && StringFind(l_name_8, "Macd") == -1 && StringFind(l_name_8, "Sto") == -1) {
                     ObjectDelete(l_name_8);
                     li_16 = TRUE;
                  }
               }
            }
         }
      }
      if (UseLineTrader) linetrader();
   }
   return (0);
}

int stock_peak(int a_shift_0) {
   double l_istochastic_4 = iStochastic(Symbol(), 0, StochKPeriod, StochDPeriod, StochSlowing, MODE_SMA, 0, MODE_MAIN, a_shift_0 - 1);
   double l_istochastic_12 = iStochastic(Symbol(), 0, StochKPeriod, StochDPeriod, StochSlowing, MODE_SMA, 0, MODE_MAIN, a_shift_0);
   double l_istochastic_20 = iStochastic(Symbol(), 0, StochKPeriod, StochDPeriod, StochSlowing, MODE_SMA, 0, MODE_MAIN, a_shift_0 + 1);
   double l_istochastic_28 = iStochastic(Symbol(), 0, StochKPeriod, StochDPeriod, StochSlowing, MODE_SMA, 0, MODE_MAIN, a_shift_0 + 2);
   if (l_istochastic_12 > l_istochastic_4 && l_istochastic_12 > l_istochastic_20 && l_istochastic_12 > l_istochastic_28) return (1);
   if (l_istochastic_12 < l_istochastic_4 && l_istochastic_12 < l_istochastic_20 && l_istochastic_12 < l_istochastic_28) return (2);
   return (0);
}

void draw_line(int ai_0, double a_price_4, int ai_12, double a_price_16, string a_name_24, color a_color_32, int a_width_36, int a_style_40) {
   double ld_44;
   ObjectDelete(a_name_24);
   if (gi_364) {
      ld_44 = 10.0 * MathArctan((a_price_4 - a_price_16) / ((-ai_0) + ai_12)) / g_point_440;
      ObjectCreate(a_name_24 + "txt", OBJ_TEXT, 0, Time[ai_0], a_price_4);
      ObjectSetText(a_name_24 + "txt", DoubleToStr(ld_44, 1), 9, "Lucida Console", Yellow);
   }
   ObjectCreate(a_name_24, OBJ_TREND, 0, Time[ai_0], a_price_4, Time[ai_12], a_price_16);
   ObjectSet(a_name_24, OBJPROP_COLOR, a_color_32);
   ObjectSet(a_name_24, OBJPROP_RAY, FALSE);
   if (CustomStyles) {
      ObjectSet(a_name_24, OBJPROP_STYLE, a_style_40);
      return;
   }
   ObjectSet(a_name_24, OBJPROP_WIDTH, a_width_36);
}

void draw_line_ind(int ai_0, double a_price_4, int ai_12, double a_price_16, string a_name_24, color a_color_32, int a_width_36, int a_window_40, int a_style_44) {
   double ld_48;
   ObjectDelete(a_name_24);
   if (gi_364) {
      ld_48 = 50.0 * MathArctan((a_price_4 - a_price_16) / ((-ai_0) + ai_12));
      if (WindowFind(MACDName) == a_window_40) ld_48 = 200.0 * (MathArctan((a_price_4 - a_price_16) / ((-ai_0) + ai_12)) / g_point_440);
      ObjectCreate(a_name_24 + "txt", OBJ_TEXT, a_window_40, Time[ai_0], a_price_4);
      ObjectSetText(a_name_24 + "txt", DoubleToStr(ld_48, 1), 9, "Lucida Console", Yellow);
   }
   if (a_window_40 != -1) {
      ObjectCreate(a_name_24, OBJ_TREND, a_window_40, Time[ai_0], a_price_4, Time[ai_12], a_price_16);
      ObjectSet(a_name_24, OBJPROP_COLOR, a_color_32);
      ObjectSet(a_name_24, OBJPROP_RAY, FALSE);
      if (CustomStyles) ObjectSet(a_name_24, OBJPROP_STYLE, a_style_44);
      else ObjectSet(a_name_24, OBJPROP_WIDTH, a_width_36);
   }
}

bool NewBar() {
   if (g_time_548 == 0) g_time_548 = Time[0];
   if (g_time_548 != Time[0]) {
      g_time_548 = Time[0];
      return (TRUE);
   }
   return (FALSE);
}

/*
string authentication(string as_0, string as_8) {
   string ls_24;
   string ls_unused_32;
   string ls_16 = "mode=authenticate&username=" + as_0 + "&password=" + as_8;
   Base64Encode(ls_16, ls_24);
   return (LoadURL(ProcessURL("http://www.forexmastermethod.com/authea/tradeloc_auth.php?encoded=" + ls_24)));
}

string latest_version() {
   string ls_unused_0;
   string ls_unused_8;
   string ls_unused_16;
   return (LoadURL(ProcessURL("http://www.forexmastermethod.com/authea/tradeloc_version.php")));
}

void Base64Encode(string as_0, string &as_8) {
   int li_28;
   int li_32;
   int li_36;
   int li_40;
   int li_44;
   int li_48;
   int li_52;
   int li_16 = 0;
   int li_20 = 0;
   int l_str_len_24 = StringLen(as_0);
   while (li_16 < l_str_len_24) {
      li_36 = StringGetChar(as_0, li_16);
      li_16++;
      if (li_16 >= l_str_len_24) {
         li_32 = 0;
         li_28 = 0;
         li_20 = 2;
      } else {
         li_32 = StringGetChar(as_0, li_16);
         li_16++;
         if (li_16 >= l_str_len_24) {
            li_28 = 0;
            li_20 = 1;
         } else {
            li_28 = StringGetChar(as_0, li_16);
            li_16++;
         }
      }
      li_40 = li_36 >> 2;
      li_44 = (li_36 & 3 * 16) | li_32 >> 4;
      li_48 = (li_32 & 15 * 4) | li_28 >> 6;
      li_52 = li_28 & 63;
      as_8 = as_8 + CharToStr(gia_488[li_40]);
      as_8 = as_8 + CharToStr(gia_488[li_44]);
      switch (li_20) {
      case 0:
         as_8 = as_8 + CharToStr(gia_488[li_48]);
         as_8 = as_8 + CharToStr(gia_488[li_52]);
         break;
      case 1:
         as_8 = as_8 + CharToStr(gia_488[li_48]);
         as_8 = as_8 + "=";
         break;
      case 2:
         as_8 = as_8 + "==";
      }
   }
}

string LoadURL(string as_0) {
   g_count_512 = 0;
   for (gi_504 = FALSE; g_count_512 < 3 && gi_504 == FALSE; g_count_512++) {
      if (gi_508 != 0) gi_504 = InternetOpenUrlA(gi_508, as_0, 0, 0, -2079850240, 0);
      if (gi_504 == FALSE) {
         InternetCloseHandle(gi_508);
         gi_508 = InternetOpenA("mymt4InetSession", gi_492, 0, 0, 0);
      }
   }
   gs_516 = "";
   gia_524[0] = 1;
   while (gia_524[0] > 0) {
      InternetReadFile(gi_504, gs_532, 200, gia_524);
      if (gia_524[0] > 0) gs_516 = gs_516 + StringSubstr(gs_532, 0, gia_524[0]);
      if (StringSubstr(gs_532, 0, gia_524[0]) == "0") break;
      if (StringSubstr(gs_532, 0, gia_524[0]) == "4") break;
      if (StringSubstr(gs_532, 0, gia_524[0]) == "1") break;
   }
   InternetCloseHandle(gi_504);
   return (gs_516);
}

string ProcessURL(string as_0) {
   string ls_12;
   string ls_20;
   for (int li_8 = StringFind(as_0, " "); li_8 != -1; li_8 = StringFind(as_0, " ")) {
      ls_12 = StringTrimLeft(StringTrimRight(StringSubstr(as_0, 0, StringFind(as_0, " ", 0))));
      ls_20 = StringTrimLeft(StringTrimRight(StringSubstr(as_0, StringFind(as_0, " ", 0))));
      as_0 = ls_12 + "%20" + ls_20;
   }
   return (as_0);
}*/

void linetrader() {
   string l_name_0 = "";
   int li_8 = -1;
   gs_464 = gs_456 
      + "\n\n    Line Trader is Running .... \n Stop Loss: " + StopLoss 
      + "\n Take Profit: " + TakeProfit 
   + "\n PipsRangeFromLine: " + PipsRangeFromLine;
   if (CheckAfterClose) {
      gs_464 = gs_464 
      + "\n\n Tracks only on Candle CLOSE \n\n Tracking: ";
   } else {
      gs_464 = gs_464 
      + "\n Tracks REAL Time \n\n Tracking: ";
   }
   for (int li_16 = 0; li_16 < ObjectsTotal(); li_16++) {
      l_name_0 = ObjectName(li_16);
      li_8 = MyObject(l_name_0);
      if (li_8 != -1) {
         if (MyOpenTime(l_name_0, li_8)) {
            if (OpenOrders) OpenTrade(li_8);
            ObjectSet(l_name_0, OBJPROP_COLOR, OnCompleteColor);
            ObjectSetText(l_name_0, l_name_0 + " " + OnCompleteText, 10);
            if (NotifyByAlert) Alert("Work for " + l_name_0 + " COMPLETED on " + Symbol() + " at price" + Bid);
         }
      }
   }
   Comment(gs_464);
}

bool MyOpenTime(string a_name_0, int ai_8) {
   double ld_12 = 0;
   if (ObjectType(a_name_0) == 1) ld_12 = ObjectGet(a_name_0, OBJPROP_PRICE1);
   else ld_12 = ObjectGetValueByShift(a_name_0, 0);
   if (ld_12 == 0.0) return (FALSE);
   gs_464 = gs_464 
   + "\n  " + a_name_0 + " at Price: " + DoubleToStr(ld_12, Digits);
   if (CheckAfterClose) {
      if (Close[1] > ld_12 + gd_448 && Bid > ld_12 + gd_448 && ai_8 == 1 || ai_8 == 3) return (TRUE);
      if (Close[1] < ld_12 - gd_448 && Bid < ld_12 - gd_448 && ai_8 == 2 || ai_8 == 4) return (TRUE);
      return (FALSE);
   }
   if (Bid > ld_12 + gd_448 && ai_8 == 1 || ai_8 == 3) return (TRUE);
   if (Bid < ld_12 - gd_448 && ai_8 == 2 || ai_8 == 4) return (TRUE);
   return (FALSE);
}

int MyObject(string a_name_0) {
   int li_8 = ObjectGet(a_name_0, OBJPROP_COLOR);
   if (li_8 == BuyAboveLineColor && StringFind(a_name_0, BuyAboveLineName) != -1) return (1);
   if (li_8 == BuyBelowLineColor && StringFind(a_name_0, BuyBelowLineName) != -1) return (2);
   if (li_8 == SellAboveLineColor && StringFind(a_name_0, SellAboveLineName) != -1) return (3);
   if (li_8 == SellBelowLineColor && StringFind(a_name_0, SellBelowLineName) != -1) return (4);
   return (-1);
}

int OpenTrade(int ai_0) {
   double l_price_4;
   double l_price_24;
   double l_price_32;
   int li_12 = 1;
   RefreshRates();
   int l_cmd_16 = -1;
   if (ai_0 < 3) {
      l_price_4 = Ask;
      l_cmd_16 = 0;
   } else {
      l_price_4 = Bid;
      li_12 = -1;
      l_cmd_16 = 1;
   }
   int l_ticket_20 = OrderSend(Symbol(), l_cmd_16, LotSize, l_price_4, g_slippage_472, 0, 0, 0, MagicNumber);
   if (l_ticket_20 < 0) {
      Print("Error opening Order " + GetLastError());
      return (0);
   }
   if (OrderSelect(l_ticket_20, SELECT_BY_TICKET) != FALSE) {
      l_price_24 = 0;
      l_price_32 = 0;
      if (StopLoss != 0) l_price_24 = OrderOpenPrice() - li_12 * g_point_440 * StopLoss;
      if (TakeProfit != 0) l_price_32 = OrderOpenPrice() + li_12 * g_point_440 * TakeProfit;
      OrderModify(l_ticket_20, OrderOpenPrice(), l_price_24, l_price_32, OrderExpiration());
   }
   return (1);
}